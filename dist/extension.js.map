{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://db-viewer-vscode/./src/clients/SQLiteClient.ts","webpack://db-viewer-vscode/./src/clients/index.ts","webpack://db-viewer-vscode/./src/extension.ts","webpack://db-viewer-vscode/./src/html.ts","webpack://db-viewer-vscode/./src/providers/DBTreeProvider.ts","webpack://db-viewer-vscode/./src/providers/SidebarProvider.ts","webpack://db-viewer-vscode/./src/providers/WebviewProvider.ts","webpack://db-viewer-vscode/./src/providers/index.ts","webpack://db-viewer-vscode/external commonjs \"vscode\"","webpack://db-viewer-vscode/external node-commonjs \"child_process\"","webpack://db-viewer-vscode/external node-commonjs \"fs\"","webpack://db-viewer-vscode/external node-commonjs \"path\"","webpack://db-viewer-vscode/webpack/bootstrap","webpack://db-viewer-vscode/webpack/startup"],"sourcesContent":["import { exec } from 'child_process';\nimport * as fs from 'fs';\n\nexport interface TableInfo {\n  name: string;\n  columns: { name: string; type: string }[];\n}\n\nexport class SQLiteClient {\n  private _dbFilePath?: string;\n\n  constructor(filePath: string) {\n    if (!fs.existsSync(filePath)) {\n      throw new Error('Database file not found.');\n    }\n    this._dbFilePath = filePath;\n  }\n\n  async getTablesAndColumns(): Promise<TableInfo[]> {\n    if (!this._dbFilePath) {\n      throw new Error('No database loaded.');\n    }\n\n    const tables = await this.executeCommand(\n      `SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';`\n    );\n\n    const tableInfoPromises = tables\n      .split('\\n')\n      .filter(Boolean)\n      .map(async tableName => {\n        const columns = await this.executeCommand(`PRAGMA table_info(${tableName});`);\n        const columnDetails = columns\n          .split('\\n')\n          .filter(Boolean)\n          .map(line => {\n            const [cid, name, type] = line.split('|');\n            return { name, type };\n          });\n\n        return { name: tableName, columns: columnDetails };\n      });\n\n    return Promise.all(tableInfoPromises);\n  }\n\n  executeCommand(query: string): Promise<string> {\n    if (!this._dbFilePath) {\n      return Promise.reject(new Error('No database loaded.'));\n    }\n\n    // Prepend `sqlite3` and database file path to the query\n    const cliCommand = `sqlite3 \"${this._dbFilePath}\" \"${query}\"`;\n    console.log(cliCommand);\n    return new Promise((resolve, reject) => {\n      exec(cliCommand, (error, stdout, stderr) => {\n        if (error) {\n          return reject(stderr || error.message);\n        }\n        console.log('command output', '\\n', query, '\\n', stdout.trim(), '\\n');\n        resolve(stdout.trim());\n      });\n    });\n  }\n}\n","export * from './DatabaseClient';\nexport * from './SQLiteClient';\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { DBTreeProvider, SidebarProvider, WebviewProvider } from './providers';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log('Congratulations, your extension \"db-viewer\" is now active!');\n\n  const dbTreeProvider = new DBTreeProvider(context.extensionUri);\n  const sidebarProvider = new SidebarProvider(context, dbTreeProvider);\n  const queryResultProvider = new WebviewProvider(context, 'Query Results');\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand('db-viewer.helloWorld', () => {\n      // The code you place here will be executed every time your command is executed\n      // Display a message box to the user\n      vscode.window.showInformationMessage('Hello World from DB Viewer!');\n    })\n  );\n  context.subscriptions.push(vscode.window.registerTreeDataProvider(DBTreeProvider.viewId, dbTreeProvider));\n  context.subscriptions.push(vscode.window.registerWebviewViewProvider(SidebarProvider.viewId, sidebarProvider));\n  context.subscriptions.push(\n    vscode.commands.registerCommand('db-viewer.queryTable', async (args: { label: string }) => {\n      console.log('queryTable args: ', JSON.stringify(args));\n      const sqliteClient = sidebarProvider.sqliteClient;\n      const tableName = args.label;\n\n      // read columns of given table\n      const columnInfoQuery = `PRAGMA table_info(${tableName});`;\n      const selectQuery = `SELECT * FROM ${args.label} LIMIT 10;`;\n\n      console.log('select query', selectQuery);\n      try {\n        const columnInfoResult = await sqliteClient?.executeCommand(columnInfoQuery);\n\n        console.log('columnInfoResult', columnInfoResult);\n        // Parse column info to get column names\n        const columns: string[] = (columnInfoResult || '')\n          .split('\\n')\n          .filter(Boolean)\n          .map(line => line.split('|')[1]); // Assuming 2nd field is the column name\n\n        // read actual data from select query\n        const queryResult = await sqliteClient?.executeCommand(selectQuery);\n        // Parse rows into an array of objects\n        const rows = (queryResult || '')\n          .split('\\n')\n          .filter(Boolean)\n          .map(row => {\n            const values = row.split('|');\n            return columns.reduce((obj, col, index) => {\n              obj[col] = values[index];\n              return obj;\n            }, {} as Record<string, string>);\n          });\n        queryResultProvider.show({ tableName, columns, rows });\n      } catch (error) {\n        vscode.window.showErrorMessage(\n          `Failed to query table \"${args.label}\": ${(error as { message: string }).message}`\n        );\n      }\n    })\n  );\n  context.subscriptions.push(\n    vscode.commands.registerCommand('db-viewer.activate', async () => {\n      await vscode.commands.executeCommand('workbench.view.extension.db-viewer.helloWorld');\n    })\n  );\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n","import path from 'path';\nimport * as vscode from 'vscode';\n\nexport const getHTMLForWebview = (webview: vscode.Webview, extensionUri: string, scriptFile: string) => {\n  const styleResetUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'reset.css')));\n  const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'vscode.css')));\n  const scriptUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, `dist/webviews/${scriptFile}.js`)));\n\n  const styleMainUri = '';\n  const nonce = getNonce();\n\n  return `<!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Webview with Preact</title>\n                <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t<link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n                <link href=\"${styleMainUri}\" rel=\"stylesheet\">\n                <script nonce=\"${nonce}\">\n                    const vscodeApi = acquireVsCodeApi();\n                </script>\n            </head>\n            <body>\n                <div id=\"app\"></div>\n                <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n            </body>\n            </html>`;\n};\n\nfunction getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n","import * as vscode from 'vscode';\n\nexport class DBTreeItem extends vscode.TreeItem {\n  children?: DBTreeItem[];\n  constructor(\n    label: string,\n    collapsibleState: vscode.TreeItemCollapsibleState,\n    readonly extensionPath: string,\n    children: DBTreeItem[] = [],\n    public readonly contextValue: string = '',\n    public readonly command?: vscode.Command\n  ) {\n    super(label, collapsibleState);\n    this.children = children || [];\n\n    if (contextValue === 'table') {\n      this.command = {\n        title: 'Query Table',\n        command: 'db-viewer.queryTable',\n        arguments: [label] // Pass the label (table name) as an argument\n      };\n    }\n  }\n}\n\nexport class DBTreeProvider implements vscode.TreeDataProvider<DBTreeItem> {\n  static viewId = 'dbviewer-treeview';\n  private _onDidChangeTreeData: vscode.EventEmitter<DBTreeItem | undefined | null | void> = new vscode.EventEmitter();\n  readonly onDidChangeTreeData: vscode.Event<DBTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n  private tables: DBTreeItem[] = []; // Store the tables and columns here\n\n  constructor(readonly extensionUri: vscode.Uri) {}\n\n  setDatabaseData(tables: DBTreeItem[]) {\n    this.tables = tables; // Update the tree data\n    this.refresh(); // Notify the tree view to refresh\n  }\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n\n  getTreeItem(element: DBTreeItem): vscode.TreeItem {\n    element.iconPath = this._getIcon(element.contextValue);\n    return element;\n  }\n\n  getChildren(element?: DBTreeItem): DBTreeItem[] {\n    if (element) {\n      // Return columns for a given table\n      return element.children || [];\n    }\n    // Return tables at the root level\n    return this.tables;\n  }\n\n  private _getIcon(contextValue: string): vscode.Uri | vscode.ThemeIcon | undefined {\n    if (contextValue === 'table') {\n      return vscode.Uri.joinPath(this.extensionUri, 'resources', 'table.svg');\n    }\n    if (contextValue === 'column') {\n      return new vscode.ThemeIcon('symbol-field');\n    }\n    return undefined;\n  }\n}\n","import * as vscode from 'vscode';\nimport { SQLiteClient } from '../clients';\nimport { getHTMLForWebview } from '../html';\nimport { DBTreeItem, DBTreeProvider } from './DBTreeProvider';\n\nexport class SidebarProvider implements vscode.WebviewViewProvider {\n  static viewId = 'dbviewer-sidebar';\n  private _view?: vscode.WebviewView;\n  private _sqliteClient?: SQLiteClient;\n\n  constructor(private readonly _context: vscode.ExtensionContext, private readonly _dbTreeProvider: DBTreeProvider) {}\n\n  get sqliteClient() {\n    return this._sqliteClient;\n  }\n\n  resolveWebviewView(webviewView: vscode.WebviewView) {\n    this._view = webviewView;\n    webviewView.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [this._context.extensionUri]\n    };\n    webviewView.webview.html = getHTMLForWebview(webviewView.webview, this._context.extensionPath, 'Sidebar');\n    webviewView.webview.onDidReceiveMessage(({ command, ...rest }) => {\n      console.log('command', command, rest);\n      this._executeCommand(command, rest);\n    });\n  }\n\n  revive(panel: vscode.WebviewView) {\n    this._view = panel;\n  }\n\n  private async _executeCommand(command: string, args: any) {\n    switch (command) {\n      case 'GREET': {\n        vscode.window.showInformationMessage(args.message);\n        break;\n      }\n      case 'PICK_FILE': {\n        await this._pickDatabaseFile();\n        break;\n      }\n    }\n  }\n\n  private async _pickDatabaseFile() {\n    const fileUris = await vscode.window.showOpenDialog({\n      canSelectMany: false,\n      openLabel: 'Select SQLite Database',\n      filters: { 'SQLite Database': ['db'] }\n    });\n\n    if (fileUris && fileUris[0]) {\n      this._loadDatabase(fileUris[0].fsPath);\n    }\n  }\n\n  private async _loadDatabase(filePath: string) {\n    this._sqliteClient = new SQLiteClient(filePath);\n    // this._sqliteClient.loadDatabase(filePath);\n    try {\n      const tables = await this._sqliteClient.getTablesAndColumns(); // Adjusted function to get data\n      const treeItems = tables.map(\n        table =>\n          new DBTreeItem(\n            table.name,\n            vscode.TreeItemCollapsibleState.Collapsed,\n            this._context.extensionPath,\n            table.columns.map(\n              column =>\n                new DBTreeItem(\n                  column.name,\n                  vscode.TreeItemCollapsibleState.None,\n                  this._context.extensionPath,\n                  undefined,\n                  'column'\n                )\n            ),\n            'table'\n          )\n      );\n      this._dbTreeProvider.setDatabaseData(treeItems); // Update the tree view with data\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to load database: ${(error as { message: string }).message}`);\n    }\n  }\n}\n","import * as vscode from 'vscode';\nimport { getHTMLForWebview } from '../html';\n\nexport class WebviewProvider {\n  static viewId = 'queryresult-view';\n  private panel: vscode.WebviewPanel | null = null;\n\n  constructor(private readonly _context: vscode.ExtensionContext, private title: string) {}\n\n  /**\n   * Show the webview panel with the given data.\n   * @param data Data to pass to the webview.\n   */\n  public show(data: any): void {\n    if (this.panel) {\n      const column = vscode.window.activeTextEditor ? vscode.window.activeTextEditor.viewColumn : undefined;\n      // If the panel already exists, bring it to the front and update its content.\n      // this.panel.reveal(vscode.ViewColumn.Beside);\n      this.panel.reveal(column);\n      this.panel.webview.postMessage(data);\n    } else {\n      // Create a new webview panel.\n\n      this.panel = vscode.window.createWebviewPanel(WebviewProvider.viewId, this.title, vscode.ViewColumn.Beside, {\n        enableScripts: true,\n        localResourceRoots: [\n          vscode.Uri.joinPath(this._context.extensionUri, 'resources'),\n          vscode.Uri.joinPath(this._context.extensionUri, 'dist')\n        ]\n      });\n\n      this.panel.webview.html = getHTMLForWebview(this.panel.webview, this._context.extensionPath, 'QueryResults');\n\n      // Handle panel disposal.\n      this.panel.onDidDispose(() => {\n        this.panel = null;\n      });\n\n      // Send initial data to the webview.\n      this.panel.webview.postMessage(data);\n    }\n  }\n}\n","export * from './DBTreeProvider';\nexport * from './SidebarProvider';\nexport * from './WebviewProvider';\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["_dbFilePath","constructor","filePath","fs","existsSync","Error","this","getTablesAndColumns","tableInfoPromises","executeCommand","split","filter","Boolean","map","async","tableName","name","columns","line","cid","type","Promise","all","query","reject","cliCommand","console","log","resolve","exec","error","stdout","stderr","message","trim","context","dbTreeProvider","DBTreeProvider","extensionUri","sidebarProvider","SidebarProvider","queryResultProvider","WebviewProvider","subscriptions","push","vscode","commands","registerCommand","window","showInformationMessage","registerTreeDataProvider","viewId","registerWebviewViewProvider","args","JSON","stringify","sqliteClient","label","columnInfoQuery","selectQuery","columnInfoResult","rows","row","values","reduce","obj","col","index","show","showErrorMessage","getHTMLForWebview","webview","scriptFile","styleResetUri","asWebviewUri","Uri","file","join","styleVSCodeUri","scriptUri","nonce","text","possible","i","charAt","Math","floor","random","getNonce","DBTreeItem","TreeItem","extensionPath","contextValue","command","children","collapsibleState","super","title","arguments","static","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","tables","setDatabaseData","refresh","fire","getTreeItem","element","iconPath","_getIcon","getChildren","joinPath","ThemeIcon","_context","_dbTreeProvider","_view","_sqliteClient","resolveWebviewView","webviewView","options","enableScripts","localResourceRoots","html","onDidReceiveMessage","rest","_executeCommand","revive","panel","_pickDatabaseFile","fileUris","showOpenDialog","canSelectMany","openLabel","filters","_loadDatabase","fsPath","SQLiteClient","treeItems","table","TreeItemCollapsibleState","Collapsed","column","None","undefined","data","activeTextEditor","viewColumn","reveal","postMessage","createWebviewPanel","ViewColumn","Beside","onDidDispose","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}