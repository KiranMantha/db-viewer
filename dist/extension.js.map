{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://db-viewer-vscode-file/./src/clients/SQLiteClient.ts","webpack://db-viewer-vscode-file/./src/clients/index.ts","webpack://db-viewer-vscode-file/./src/constants.ts","webpack://db-viewer-vscode-file/./src/extension.ts","webpack://db-viewer-vscode-file/./src/html.ts","webpack://db-viewer-vscode-file/./src/providers/DBTreeProvider.ts","webpack://db-viewer-vscode-file/./src/providers/DBViewerProvider.ts","webpack://db-viewer-vscode-file/./src/providers/SidebarProvider.ts","webpack://db-viewer-vscode-file/./src/providers/WebviewProvider.ts","webpack://db-viewer-vscode-file/./src/providers/index.ts","webpack://db-viewer-vscode-file/external commonjs \"vscode\"","webpack://db-viewer-vscode-file/external node-commonjs \"child_process\"","webpack://db-viewer-vscode-file/external node-commonjs \"fs\"","webpack://db-viewer-vscode-file/external node-commonjs \"path\"","webpack://db-viewer-vscode-file/webpack/bootstrap","webpack://db-viewer-vscode-file/webpack/startup"],"sourcesContent":["import { exec } from 'child_process';\nimport * as fs from 'fs';\n\nexport interface TableInfo {\n  name: string;\n  columns: { name: string; type: string }[];\n}\n\nexport class SQLiteClient {\n  private _dbFilePath?: string;\n\n  constructor(filePath: string) {\n    if (!fs.existsSync(filePath)) {\n      throw new Error('Database file not found.');\n    }\n    this._dbFilePath = filePath;\n  }\n\n  async getTablesAndColumns(): Promise<TableInfo[]> {\n    if (!this._dbFilePath) {\n      throw new Error('No database loaded.');\n    }\n\n    const tables = await this.executeCommand(\n      `SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';`\n    );\n\n    const tableInfoPromises = tables\n      .split('\\n')\n      .filter(Boolean)\n      .map(async tableName => {\n        const columns = await this.executeCommand(`PRAGMA table_info(${tableName});`);\n        const columnDetails = columns\n          .split('\\n')\n          .filter(Boolean)\n          .map(line => {\n            const [cid, name, type] = line.split('|');\n            return { name, type };\n          });\n\n        return { name: tableName, columns: columnDetails };\n      });\n\n    return Promise.all(tableInfoPromises);\n  }\n\n  executeCommand(query: string): Promise<string> {\n    if (!this._dbFilePath) {\n      return Promise.reject(new Error('No database loaded.'));\n    }\n\n    // Prepend `sqlite3` and database file path to the query\n    const cliCommand = `sqlite3 \"${this._dbFilePath}\" \"${query}\"`;\n    console.log(cliCommand);\n    return new Promise((resolve, reject) => {\n      exec(cliCommand, (error, stdout, stderr) => {\n        if (error) {\n          return reject(stderr || error.message);\n        }\n        console.log('command output', '\\n', query, '\\n', stdout.trim(), '\\n');\n        resolve(stdout.trim());\n      });\n    });\n  }\n}\n","export * from './DatabaseClient';\nexport * from './SQLiteClient';\n","export const ExtensionId = 'db-viewer';\nexport const NestingPattern = '${capture}.${extname}-*';\nexport const FullExtensionId = `ops.${ExtensionId}`;\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { ExtensionId, NestingPattern } from './constants';\nimport { DBViewerProvider } from './providers';\n// import { DBTreeProvider, SidebarProvider, WebviewProvider } from './providers';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  // Use the console to output diagnostic information (console.log) and errors (console.error)\n  // This line of code will only be executed once when your extension is activated\n  console.log('Congratulations, your extension \"db-viewer\" is now active!');\n\n  // const dbTreeProvider = new DBTreeProvider(context.extensionUri);\n  // const sidebarProvider = new SidebarProvider(context, dbTreeProvider);\n  // const queryResultProvider = new WebviewProvider(context, 'Query Results');\n  // context.subscriptions.push(vscode.window.registerTreeDataProvider(DBTreeProvider.viewId, dbTreeProvider));\n  // context.subscriptions.push(vscode.window.registerWebviewViewProvider(SidebarProvider.viewId, sidebarProvider));\n  // context.subscriptions.push(\n  //   vscode.commands.registerCommand('db-viewer.queryTable', async (args: { label: string }) => {\n  //     console.log('queryTable args: ', JSON.stringify(args));\n  //     const sqliteClient = sidebarProvider.sqliteClient;\n  //     const tableName = args.label;\n\n  //     // read columns of given table\n  //     const columnInfoQuery = `PRAGMA table_info(${tableName});`;\n  //     const selectQuery = `SELECT * FROM ${args.label} LIMIT 10;`;\n\n  //     console.log('select query', selectQuery);\n  //     try {\n  //       const columnInfoResult = await sqliteClient?.executeCommand(columnInfoQuery);\n\n  //       console.log('columnInfoResult', columnInfoResult);\n  //       // Parse column info to get column names\n  //       const columns: string[] = (columnInfoResult || '')\n  //         .split('\\n')\n  //         .filter(Boolean)\n  //         .map(line => line.split('|')[1]); // Assuming 2nd field is the column name\n\n  //       // read actual data from select query\n  //       const queryResult = await sqliteClient?.executeCommand(selectQuery);\n  //       // Parse rows into an array of objects\n  //       const rows = (queryResult || '')\n  //         .split('\\n')\n  //         .filter(Boolean)\n  //         .map(row => {\n  //           const values = row.split('|');\n  //           return columns.reduce((obj, col, index) => {\n  //             obj[col] = values[index];\n  //             return obj;\n  //           }, {} as Record<string, string>);\n  //         });\n  //       queryResultProvider.show({ tableName, columns, rows });\n  //     } catch (error) {\n  //       vscode.window.showErrorMessage(\n  //         `Failed to query table \"${args.label}\": ${(error as { message: string }).message}`\n  //       );\n  //     }\n  //   })\n  // );\n  context.subscriptions.push(\n    vscode.commands.registerCommand(`${ExtensionId}.addFileNestingPatterns`, addFileNestingPatternsCommand)\n  );\n\n  context.subscriptions.push(\n    vscode.commands.registerCommand(`${ExtensionId}.openDatabaseFile`, async (uri: vscode.Uri) => {\n      console.log('file path', uri);\n      const dbPath = uri.fsPath;\n      const dbViewerProvider = new DBViewerProvider(context, 'DB Viewer');\n      dbViewerProvider.loadDatabase(dbPath);\n    })\n  );\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\nfunction addFileNestingPatternsCommand() {\n  return addFileNestingPatterns({ force: true });\n}\n\nasync function addFileNestingPatterns({ force = false } = {}) {\n  const config = vscode.workspace.getConfiguration('explorer.fileNesting');\n  const currPatterns = config.get<{ [key: string]: string }>('patterns', {});\n\n  const newPatterns = {\n    ...(force || !currPatterns['*.sqlite3'] ? { '*.sqlite3': NestingPattern } : {}),\n    ...(force || !currPatterns['*.sqlite'] ? { '*.sqlite': NestingPattern } : {}),\n    ...(force || !currPatterns['*.db'] ? { '*.db': NestingPattern } : {})\n  };\n\n  const updatedPatterns = {\n    ...currPatterns,\n    ...newPatterns\n  };\n\n  await config.update('patterns', updatedPatterns, vscode.ConfigurationTarget.Global);\n}\n","import path from 'path';\nimport * as vscode from 'vscode';\n\nexport const getHTMLForWebview = (\n  webview: vscode.Webview,\n  extensionUri: string,\n  scriptFile: string,\n  stylesFile = ''\n) => {\n  const styleResetUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'reset.css')));\n  const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'vscode.css')));\n  const scriptUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, `dist/webviews/${scriptFile}.js`)));\n  const stylesUri = stylesFile\n    ? webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', `${stylesFile}.css`)))\n    : '';\n  const nonce = getNonce();\n\n  return `<!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Webview with Preact</title>\n                <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t        <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n                <link href=\"${stylesUri}\" rel=\"stylesheet\">\n                <script nonce=\"${nonce}\">\n                    const vscodeApi = acquireVsCodeApi();\n                </script>\n            </head>\n            <body>\n                <div id=\"app\"></div>\n                <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n            </body>\n            </html>`;\n};\n\n// export function getWebviewContent(tablesWithColumns: { tableName: string; columns: string[] }[]) {\n//   const tableList = tablesWithColumns\n//     .map(\n//       table => `\n//       <li class=\"table-item\">\n//         <div class=\"table-name\">${table.tableName}</div>\n//         <ul class=\"columns\">\n//           ${table.columns.map(col => `<li>${col}</li>`).join('')}\n//         </ul>\n//       </li>\n//     `\n//     )\n//     .join('');\n\n//   return `\n//     <!DOCTYPE html>\n//     <html lang=\"en\">\n//     <head>\n//       <meta charset=\"UTF-8\">\n//       <style>\n//         body { display: flex; height: 100vh; margin: 0; }\n//         #left { width: 30%; border-right: 1px solid #ccc; padding: 10px; }\n//         #right { flex: 1; padding: 10px; }\n//         ul { list-style: none; padding: 0; margin: 0; }\n//         li { cursor: pointer; margin: 5px 0; }\n//         .columns { margin-left: 20px; display: none; }\n//         table { width: 100%; border-collapse: collapse; }\n//         th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n//       </style>\n//     </head>\n//     <body>\n//       <div id=\"left\">\n//         <h3>Tables</h3>\n//         <ul>${tableList}</ul>\n//       </div>\n//       <div id=\"right\">\n//         <h3>Results</h3>\n//         <div id=\"results\"></div>\n//       </div>\n//       <script>\n//         const vscode = acquireVsCodeApi();\n\n//         document.querySelectorAll('.table-item .table-name').forEach(item => {\n//           item.addEventListener('click', () => {\n//             const tableName = item.textContent;\n//             vscode.postMessage({ command: 'queryTable', tableName });\n//           });\n//         });\n\n//         document.querySelectorAll('.table-item').forEach(item => {\n//           item.addEventListener('click', () => {\n//             const columns = item.querySelector('.columns');\n//             columns.style.display = columns.style.display === 'none' ? 'block' : 'none';\n//           });\n//         });\n\n//         window.addEventListener('message', event => {\n//           const { command, results } = event.data;\n\n//           if (command === 'displayResults') {\n//             const rows = results.split('\\\\n').map(row => row.split('|'));\n//             const table = document.createElement('table');\n//             const headerRow = rows.shift();\n\n//             if (headerRow) {\n//               const thead = document.createElement('thead');\n//               thead.innerHTML = headerRow.map(col => <th>${col}</th>).join('');\n//               table.appendChild(thead);\n//             }\n\n//             const tbody = document.createElement('tbody');\n//             tbody.innerHTML = rows.map(row => <tr>${row.map(col => `<td>${col}</td>`).join('')}</tr>).join('');\n//             table.appendChild(tbody);\n\n//             document.getElementById('results').innerHTML = '';\n//             document.getElementById('results').appendChild(table);\n//           }\n//         });\n//       </script>\n//     </body>\n//     </html>\n//   `;\n// }\n\nfunction getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n","import * as vscode from 'vscode';\n\nexport class DBTreeItem extends vscode.TreeItem {\n  children?: DBTreeItem[];\n  constructor(\n    label: string,\n    collapsibleState: vscode.TreeItemCollapsibleState,\n    readonly extensionPath: string,\n    children: DBTreeItem[] = [],\n    public readonly contextValue: string = '',\n    public readonly command?: vscode.Command\n  ) {\n    super(label, collapsibleState);\n    this.children = children || [];\n\n    if (contextValue === 'table') {\n      this.command = {\n        title: 'Query Table',\n        command: 'db-viewer.queryTable',\n        arguments: [label] // Pass the label (table name) as an argument\n      };\n    }\n  }\n}\n\nexport class DBTreeProvider implements vscode.TreeDataProvider<DBTreeItem> {\n  static viewId = 'dbviewer-treeview';\n  private _onDidChangeTreeData: vscode.EventEmitter<DBTreeItem | undefined | null | void> = new vscode.EventEmitter();\n  readonly onDidChangeTreeData: vscode.Event<DBTreeItem | undefined | null | void> = this._onDidChangeTreeData.event;\n\n  private tables: DBTreeItem[] = []; // Store the tables and columns here\n\n  constructor(readonly extensionUri: vscode.Uri) {}\n\n  setDatabaseData(tables: DBTreeItem[]) {\n    this.tables = tables; // Update the tree data\n    this.refresh(); // Notify the tree view to refresh\n  }\n\n  refresh(): void {\n    this._onDidChangeTreeData.fire();\n  }\n\n  getTreeItem(element: DBTreeItem): vscode.TreeItem {\n    element.iconPath = this._getIcon(element.contextValue);\n    return element;\n  }\n\n  getChildren(element?: DBTreeItem): DBTreeItem[] {\n    if (element) {\n      // Return columns for a given table\n      return element.children || [];\n    }\n    // Return tables at the root level\n    return this.tables;\n  }\n\n  private _getIcon(contextValue: string): vscode.Uri | vscode.ThemeIcon | undefined {\n    if (contextValue === 'table') {\n      return vscode.Uri.joinPath(this.extensionUri, 'resources', 'table.svg');\n    }\n    if (contextValue === 'column') {\n      return new vscode.ThemeIcon('symbol-field');\n    }\n    return undefined;\n  }\n}\n","import * as vscode from 'vscode';\nimport { SQLiteClient } from '../clients';\nimport { getHTMLForWebview } from '../html';\n\nexport class DBViewerProvider {\n  static viewId = 'queryresult-view';\n  constructor(private readonly context: vscode.ExtensionContext, readonly title = '') {}\n\n  private _sqliteClient?: SQLiteClient;\n  private _panel: vscode.WebviewPanel | null = null;\n\n  get sqliteClient() {\n    return this._sqliteClient;\n  }\n\n  async loadDatabase(dbPath: string) {\n    this._sqliteClient = new SQLiteClient(dbPath);\n\n    this._panel = vscode.window.createWebviewPanel(DBViewerProvider.viewId, this.title, vscode.ViewColumn.Beside, {\n      enableScripts: true,\n      localResourceRoots: [\n        vscode.Uri.joinPath(this.context.extensionUri, 'resources'),\n        vscode.Uri.joinPath(this.context.extensionUri, 'dist')\n      ]\n    });\n\n    this._panel.webview.html = getHTMLForWebview(\n      this._panel.webview,\n      this.context.extensionPath,\n      'DBViewer',\n      'db-viewer'\n    );\n    this._panel.webview.onDidReceiveMessage(({ command, ...rest }) => {\n      console.log('command', command, rest);\n      this._executeCommand(command, rest);\n    });\n    // Handle panel disposal.\n    this._panel.onDidDispose(() => {\n      this._panel = null;\n    });\n  }\n\n  private async _executeCommand(command: string, args: any) {\n    switch (command) {\n      case 'QUERY_DATABASE': {\n        this._queryDatabase();\n        break;\n      }\n      case 'QUERY_TABLE': {\n        this._queryTable(args.tableName);\n        break;\n      }\n    }\n  }\n\n  private async _queryDatabase() {\n    const tables = await this._sqliteClient?.getTablesAndColumns();\n    console.log('tables', tables, this._panel);\n    this._panel?.webview.postMessage({ command: 'DISPLAY_TABLES', data: { tables } });\n  }\n\n  private async _queryTable(tableName: string) {\n    const columnInfoQuery = `PRAGMA table_info(${tableName});`;\n    const selectQuery = `SELECT * FROM ${tableName} LIMIT 10;`;\n    try {\n      console.log('select query', selectQuery);\n      const columnInfoResult = await this._sqliteClient?.executeCommand(columnInfoQuery);\n\n      console.log('columnInfoResult', columnInfoResult);\n      // Parse column info to get column names\n      const columns: string[] = (columnInfoResult || '')\n        .split('\\n')\n        .filter(Boolean)\n        .map(line => line.split('|')[1]); // Assuming 2nd field is the column name\n      // read actual data from select query\n      const queryResult = await this._sqliteClient?.executeCommand(selectQuery);\n      // Parse rows into an array of objects\n      const rows = (queryResult || '')\n        .split('\\n')\n        .filter(Boolean)\n        .map(row => {\n          const values = row.split('|');\n          return columns.reduce((obj, col, index) => {\n            obj[col] = values[index];\n            return obj;\n          }, {} as Record<string, string>);\n        });\n      this._panel?.webview.postMessage({ command: 'DISPLAY_QUERY_RESULTS', data: { tableName, columns, rows } });\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to query table \"${tableName}\": ${(error as { message: string }).message}`);\n    }\n  }\n}\n","import * as vscode from 'vscode';\nimport { SQLiteClient } from '../clients';\nimport { getHTMLForWebview } from '../html';\nimport { DBTreeItem, DBTreeProvider } from './DBTreeProvider';\n\nexport class SidebarProvider implements vscode.WebviewViewProvider {\n  static viewId = 'dbviewer-sidebar';\n  private _view?: vscode.WebviewView;\n  private _sqliteClient?: SQLiteClient;\n\n  constructor(private readonly _context: vscode.ExtensionContext, private readonly _dbTreeProvider: DBTreeProvider) {}\n\n  get sqliteClient() {\n    return this._sqliteClient;\n  }\n\n  resolveWebviewView(webviewView: vscode.WebviewView) {\n    this._view = webviewView;\n    webviewView.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [this._context.extensionUri]\n    };\n    webviewView.webview.html = getHTMLForWebview(webviewView.webview, this._context.extensionPath, 'Sidebar');\n    webviewView.webview.onDidReceiveMessage(({ command, ...rest }) => {\n      console.log('command', command, rest);\n      this._executeCommand(command, rest);\n    });\n  }\n\n  revive(panel: vscode.WebviewView) {\n    this._view = panel;\n  }\n\n  private async _executeCommand(command: string, args: any) {\n    switch (command) {\n      case 'GREET': {\n        vscode.window.showInformationMessage(args.message);\n        break;\n      }\n      case 'PICK_FILE': {\n        await this._pickDatabaseFile();\n        break;\n      }\n    }\n  }\n\n  private async _pickDatabaseFile() {\n    const fileUris = await vscode.window.showOpenDialog({\n      canSelectMany: false,\n      openLabel: 'Select SQLite Database',\n      filters: { 'SQLite Database': ['db'] }\n    });\n\n    if (fileUris && fileUris[0]) {\n      this._loadDatabase(fileUris[0].fsPath);\n    }\n  }\n\n  private async _loadDatabase(filePath: string) {\n    this._sqliteClient = new SQLiteClient(filePath);\n    // this._sqliteClient.loadDatabase(filePath);\n    try {\n      const tables = await this._sqliteClient.getTablesAndColumns(); // Adjusted function to get data\n      const treeItems = tables.map(\n        table =>\n          new DBTreeItem(\n            table.name,\n            vscode.TreeItemCollapsibleState.Collapsed,\n            this._context.extensionPath,\n            table.columns.map(\n              column =>\n                new DBTreeItem(\n                  column.name,\n                  vscode.TreeItemCollapsibleState.None,\n                  this._context.extensionPath,\n                  undefined,\n                  'column'\n                )\n            ),\n            'table'\n          )\n      );\n      this._dbTreeProvider.setDatabaseData(treeItems); // Update the tree view with data\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to load database: ${(error as { message: string }).message}`);\n    }\n  }\n}\n","import * as vscode from 'vscode';\nimport { getHTMLForWebview } from '../html';\n\nexport class WebviewProvider {\n  static viewId = 'queryresult-view';\n  private panel: vscode.WebviewPanel | null = null;\n\n  constructor(private readonly _context: vscode.ExtensionContext, private title: string) {}\n\n  /**\n   * Show the webview panel with the given data.\n   * @param data Data to pass to the webview.\n   */\n  public show(data: any): void {\n    if (this.panel) {\n      const column = vscode.window.activeTextEditor ? vscode.window.activeTextEditor.viewColumn : undefined;\n      // If the panel already exists, bring it to the front and update its content.\n      // this.panel.reveal(vscode.ViewColumn.Beside);\n      this.panel.reveal(column);\n      this.panel.webview.postMessage(data);\n    } else {\n      // Create a new webview panel.\n\n      this.panel = vscode.window.createWebviewPanel(WebviewProvider.viewId, this.title, vscode.ViewColumn.Beside, {\n        enableScripts: true,\n        localResourceRoots: [\n          vscode.Uri.joinPath(this._context.extensionUri, 'resources'),\n          vscode.Uri.joinPath(this._context.extensionUri, 'dist')\n        ]\n      });\n\n      this.panel.webview.html = getHTMLForWebview(this.panel.webview, this._context.extensionPath, 'QueryResults');\n\n      // Handle panel disposal.\n      this.panel.onDidDispose(() => {\n        this.panel = null;\n      });\n\n      // Send initial data to the webview.\n      this.panel.webview.postMessage(data);\n    }\n  }\n}\n","export * from './DBTreeProvider';\nexport * from './DBViewerProvider';\nexport * from './SidebarProvider';\nexport * from './WebviewProvider';\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// startup\n// Load entry module and return exports\n// This entry module is referenced by other modules so it can't be inlined\nvar __webpack_exports__ = __webpack_require__(265);\n"],"names":["_dbFilePath","constructor","filePath","fs","existsSync","Error","this","getTablesAndColumns","tableInfoPromises","executeCommand","split","filter","Boolean","map","async","tableName","name","columns","line","cid","type","Promise","all","query","reject","cliCommand","console","log","resolve","exec","error","stdout","stderr","message","trim","ExtensionId","NestingPattern","FullExtensionId","context","subscriptions","push","vscode","commands","registerCommand","addFileNestingPatternsCommand","uri","dbPath","fsPath","DBViewerProvider","loadDatabase","force","config","workspace","getConfiguration","currPatterns","get","newPatterns","updatedPatterns","update","ConfigurationTarget","Global","addFileNestingPatterns","getHTMLForWebview","webview","extensionUri","scriptFile","stylesFile","styleResetUri","asWebviewUri","Uri","file","join","styleVSCodeUri","scriptUri","stylesUri","nonce","text","possible","i","charAt","Math","floor","random","getNonce","DBTreeItem","TreeItem","extensionPath","contextValue","command","children","label","collapsibleState","super","title","arguments","static","_onDidChangeTreeData","EventEmitter","onDidChangeTreeData","event","tables","setDatabaseData","refresh","fire","getTreeItem","element","iconPath","_getIcon","getChildren","joinPath","ThemeIcon","_sqliteClient","_panel","sqliteClient","SQLiteClient","window","createWebviewPanel","viewId","ViewColumn","Beside","enableScripts","localResourceRoots","html","onDidReceiveMessage","rest","_executeCommand","onDidDispose","args","_queryDatabase","_queryTable","postMessage","data","columnInfoQuery","selectQuery","columnInfoResult","rows","row","values","reduce","obj","col","index","showErrorMessage","_context","_dbTreeProvider","_view","resolveWebviewView","webviewView","options","revive","panel","showInformationMessage","_pickDatabaseFile","fileUris","showOpenDialog","canSelectMany","openLabel","filters","_loadDatabase","treeItems","table","TreeItemCollapsibleState","Collapsed","column","None","undefined","WebviewProvider","show","activeTextEditor","viewColumn","reveal","module","exports","require","__webpack_module_cache__","__webpack_exports__","__webpack_require__","moduleId","cachedModule","__webpack_modules__","call"],"sourceRoot":""}