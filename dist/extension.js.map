{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://db-viewer-vscode-file/./src/clients/SQLiteClient.ts","webpack://db-viewer-vscode-file/./src/clients/index.ts","webpack://db-viewer-vscode-file/./src/editors/SQLiteCustomEditor.ts","webpack://db-viewer-vscode-file/./src/editors/index.ts","webpack://db-viewer-vscode-file/./src/html.ts","webpack://db-viewer-vscode-file/external commonjs \"vscode\"","webpack://db-viewer-vscode-file/external node-commonjs \"child_process\"","webpack://db-viewer-vscode-file/external node-commonjs \"fs\"","webpack://db-viewer-vscode-file/external node-commonjs \"path\"","webpack://db-viewer-vscode-file/webpack/bootstrap","webpack://db-viewer-vscode-file/./src/extension.ts"],"sourcesContent":["import { exec } from 'child_process';\nimport * as fs from 'fs';\n\nexport interface TableInfo {\n  name: string;\n  columns: { name: string; type: string }[];\n}\n\nexport class SQLiteClient {\n  private _dbFilePath?: string;\n\n  constructor(filePath: string) {\n    if (!fs.existsSync(filePath)) {\n      throw new Error('Database file not found.');\n    }\n    this._dbFilePath = filePath;\n  }\n\n  async getTablesAndColumns(): Promise<TableInfo[]> {\n    if (!this._dbFilePath) {\n      throw new Error('No database loaded.');\n    }\n\n    const tables = await this.executeCommand(\n      `SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';`\n    );\n\n    const tableInfoPromises = tables\n      .split('\\n')\n      .filter(Boolean)\n      .map(async tableName => {\n        const columns = await this.executeCommand(`PRAGMA table_info(${tableName});`);\n        const columnDetails = columns\n          .split('\\n')\n          .filter(Boolean)\n          .map(line => {\n            const [cid, name, type] = line.split('|');\n            return { name, type };\n          });\n\n        return { name: tableName, columns: columnDetails };\n      });\n\n    return Promise.all(tableInfoPromises);\n  }\n\n  executeCommand(query: string): Promise<string> {\n    if (!this._dbFilePath) {\n      return Promise.reject(new Error('No database loaded.'));\n    }\n\n    // Prepend `sqlite3` and database file path to the query\n    const cliCommand = `sqlite3 \"${this._dbFilePath}\" \"${query}\"`;\n    console.log(cliCommand);\n    return new Promise((resolve, reject) => {\n      exec(cliCommand, (error, stdout, stderr) => {\n        if (error) {\n          return reject(stderr || error.message);\n        }\n        console.log('command output', '\\n', query, '\\n', stdout.trim(), '\\n');\n        resolve(stdout.trim());\n      });\n    });\n  }\n}\n","export * from './DatabaseClient';\nexport * from './SQLiteClient';\n","import * as vscode from 'vscode';\nimport { SQLiteClient } from '../clients';\nimport { getHTMLForWebview } from '../html';\n\nexport class SQLiteCustomEditorProvider implements vscode.CustomReadonlyEditorProvider {\n  public static register(context: vscode.ExtensionContext): vscode.Disposable {\n    return vscode.window.registerCustomEditorProvider(\n      SQLiteCustomEditorProvider.viewType,\n      new SQLiteCustomEditorProvider(context),\n      {\n        webviewOptions: {\n          retainContextWhenHidden: true\n        }\n      }\n    );\n  }\n\n  private static readonly viewType = 'db-viewer.databaseEditor';\n  private _sqliteClient?: SQLiteClient;\n  private _panel: vscode.WebviewPanel | null = null;\n\n  constructor(private readonly context: vscode.ExtensionContext) {}\n\n  public async openCustomDocument(\n    uri: vscode.Uri,\n    openContext: vscode.CustomDocumentOpenContext,\n    token: vscode.CancellationToken\n  ): Promise<vscode.CustomDocument> {\n    // Return a readonly document (can be extended for writable).\n    return { uri, dispose: () => {} };\n  }\n\n  public async resolveCustomEditor(\n    document: vscode.CustomDocument,\n    webviewPanel: vscode.WebviewPanel,\n    token: vscode.CancellationToken\n  ): Promise<void> {\n    const dbPath = document.uri.fsPath;\n    this._sqliteClient = new SQLiteClient(dbPath);\n\n    webviewPanel.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [\n        vscode.Uri.joinPath(this.context.extensionUri, 'resources'),\n        vscode.Uri.joinPath(this.context.extensionUri, 'dist')\n      ]\n    };\n\n    webviewPanel.webview.html = getHTMLForWebview(\n      webviewPanel.webview,\n      this.context.extensionPath,\n      'DBViewer',\n      'db-viewer'\n    );\n\n    webviewPanel.webview.onDidReceiveMessage(({ command, ...rest }) => {\n      console.log('command', command, rest);\n      this._executeCommand(command, rest);\n    });\n    this._panel = webviewPanel;\n  }\n\n  private async _executeCommand(command: string, args: any) {\n    switch (command) {\n      case 'QUERY_DATABASE': {\n        this._queryDatabase();\n        break;\n      }\n      case 'QUERY_TABLE': {\n        this._queryTable(args.tableName);\n        break;\n      }\n    }\n  }\n\n  private async _queryDatabase() {\n    const tables = await this._sqliteClient?.getTablesAndColumns();\n    console.log('tables', tables, this._panel);\n    this._panel?.webview.postMessage({ command: 'DISPLAY_TABLES', data: { tables } });\n  }\n\n  private async _queryTable(tableName: string) {\n    const columnInfoQuery = `PRAGMA table_info(${tableName});`;\n    const selectQuery = `SELECT * FROM ${tableName} LIMIT 10;`;\n    try {\n      console.log('select query', selectQuery);\n      const columnInfoResult = await this._sqliteClient?.executeCommand(columnInfoQuery);\n\n      console.log('columnInfoResult', columnInfoResult);\n      // Parse column info to get column names\n      const columns: string[] = (columnInfoResult || '')\n        .split('\\n')\n        .filter(Boolean)\n        .map(line => line.split('|')[1]); // Assuming 2nd field is the column name\n      // read actual data from select query\n      const queryResult = await this._sqliteClient?.executeCommand(selectQuery);\n      // Parse rows into an array of objects\n      const rows = (queryResult || '')\n        .split('\\n')\n        .filter(Boolean)\n        .map(row => {\n          const values = row.split('|');\n          return columns.reduce((obj, col, index) => {\n            obj[col] = values[index];\n            return obj;\n          }, {} as Record<string, string>);\n        });\n      this._panel?.webview.postMessage({ command: 'DISPLAY_QUERY_RESULTS', data: { tableName, columns, rows } });\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to query table \"${tableName}\": ${(error as { message: string }).message}`);\n    }\n  }\n}\n","export * from './SQLiteCustomEditor';\n","import path from 'path';\nimport * as vscode from 'vscode';\n\nexport const getHTMLForWebview = (\n  webview: vscode.Webview,\n  extensionUri: string,\n  scriptFile: string,\n  stylesFile = ''\n) => {\n  const styleResetUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'reset.css')));\n  const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'vscode.css')));\n  const scriptUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, `dist/webviews/${scriptFile}.js`)));\n  const stylesUri = stylesFile\n    ? webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', `${stylesFile}.css`)))\n    : '';\n  const nonce = getNonce();\n\n  return `<!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Webview with Preact</title>\n                <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t        <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n                <link href=\"${stylesUri}\" rel=\"stylesheet\">\n                <script nonce=\"${nonce}\">\n                    const vscodeApi = acquireVsCodeApi();\n                </script>\n            </head>\n            <body>\n                <div id=\"app\"></div>\n                <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n            </body>\n            </html>`;\n};\n\n// export function getWebviewContent(tablesWithColumns: { tableName: string; columns: string[] }[]) {\n//   const tableList = tablesWithColumns\n//     .map(\n//       table => `\n//       <li class=\"table-item\">\n//         <div class=\"table-name\">${table.tableName}</div>\n//         <ul class=\"columns\">\n//           ${table.columns.map(col => `<li>${col}</li>`).join('')}\n//         </ul>\n//       </li>\n//     `\n//     )\n//     .join('');\n\n//   return `\n//     <!DOCTYPE html>\n//     <html lang=\"en\">\n//     <head>\n//       <meta charset=\"UTF-8\">\n//       <style>\n//         body { display: flex; height: 100vh; margin: 0; }\n//         #left { width: 30%; border-right: 1px solid #ccc; padding: 10px; }\n//         #right { flex: 1; padding: 10px; }\n//         ul { list-style: none; padding: 0; margin: 0; }\n//         li { cursor: pointer; margin: 5px 0; }\n//         .columns { margin-left: 20px; display: none; }\n//         table { width: 100%; border-collapse: collapse; }\n//         th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n//       </style>\n//     </head>\n//     <body>\n//       <div id=\"left\">\n//         <h3>Tables</h3>\n//         <ul>${tableList}</ul>\n//       </div>\n//       <div id=\"right\">\n//         <h3>Results</h3>\n//         <div id=\"results\"></div>\n//       </div>\n//       <script>\n//         const vscode = acquireVsCodeApi();\n\n//         document.querySelectorAll('.table-item .table-name').forEach(item => {\n//           item.addEventListener('click', () => {\n//             const tableName = item.textContent;\n//             vscode.postMessage({ command: 'queryTable', tableName });\n//           });\n//         });\n\n//         document.querySelectorAll('.table-item').forEach(item => {\n//           item.addEventListener('click', () => {\n//             const columns = item.querySelector('.columns');\n//             columns.style.display = columns.style.display === 'none' ? 'block' : 'none';\n//           });\n//         });\n\n//         window.addEventListener('message', event => {\n//           const { command, results } = event.data;\n\n//           if (command === 'displayResults') {\n//             const rows = results.split('\\\\n').map(row => row.split('|'));\n//             const table = document.createElement('table');\n//             const headerRow = rows.shift();\n\n//             if (headerRow) {\n//               const thead = document.createElement('thead');\n//               thead.innerHTML = headerRow.map(col => <th>${col}</th>).join('');\n//               table.appendChild(thead);\n//             }\n\n//             const tbody = document.createElement('tbody');\n//             tbody.innerHTML = rows.map(row => <tr>${row.map(col => `<td>${col}</td>`).join('')}</tr>).join('');\n//             table.appendChild(tbody);\n\n//             document.getElementById('results').innerHTML = '';\n//             document.getElementById('results').appendChild(table);\n//           }\n//         });\n//       </script>\n//     </body>\n//     </html>\n//   `;\n// }\n\nfunction getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","// The module 'vscode' contains the VS Code extensibility API\n// Import the module and reference it with the alias vscode in your code below\nimport * as vscode from 'vscode';\nimport { SQLiteCustomEditorProvider } from './editors';\n// import { DBTreeProvider, SidebarProvider, WebviewProvider } from './providers';\n\n// This method is called when your extension is activated\n// Your extension is activated the very first time the command is executed\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Congratulations, your extension \"db-viewer\" is now active!');\n  // context.subscriptions.push(\n  //   vscode.commands.registerCommand(`${ExtensionId}.addFileNestingPatterns`, addFileNestingPatternsCommand)\n  // );\n\n  // context.subscriptions.push(\n  //   vscode.commands.registerCommand(`${ExtensionId}.openDatabaseFile`, async (uri: vscode.Uri) => {\n  //     console.log('file path', uri);\n  //     const dbPath = uri.fsPath;\n  //     const dbViewerProvider = new DBViewerProvider(context, 'DB Viewer');\n  //     dbViewerProvider.loadDatabase(dbPath);\n  //   })\n  // );\n  context.subscriptions.push(SQLiteCustomEditorProvider.register(context));\n}\n\n// This method is called when your extension is deactivated\nexport function deactivate() {}\n\n// function addFileNestingPatternsCommand() {\n//   return addFileNestingPatterns({ force: true });\n// }\n\n// async function addFileNestingPatterns({ force = false } = {}) {\n//   const config = vscode.workspace.getConfiguration('explorer.fileNesting');\n//   const currPatterns = config.get<{ [key: string]: string }>('patterns', {});\n\n//   const newPatterns = {\n//     ...(force || !currPatterns['*.sqlite3'] ? { '*.sqlite3': NestingPattern } : {}),\n//     ...(force || !currPatterns['*.sqlite'] ? { '*.sqlite': NestingPattern } : {}),\n//     ...(force || !currPatterns['*.db'] ? { '*.db': NestingPattern } : {})\n//   };\n\n//   const updatedPatterns = {\n//     ...currPatterns,\n//     ...newPatterns\n//   };\n\n//   await config.update('patterns', updatedPatterns, vscode.ConfigurationTarget.Global);\n// }\n"],"names":["_dbFilePath","constructor","filePath","fs","existsSync","Error","this","getTablesAndColumns","tableInfoPromises","executeCommand","split","filter","Boolean","map","async","tableName","name","columns","line","cid","type","Promise","all","query","reject","cliCommand","console","log","resolve","exec","error","stdout","stderr","message","trim","SQLiteCustomEditorProvider","context","register","vscode","window","registerCustomEditorProvider","viewType","webviewOptions","retainContextWhenHidden","static","_sqliteClient","_panel","openCustomDocument","uri","openContext","token","dispose","resolveCustomEditor","document","webviewPanel","dbPath","fsPath","SQLiteClient","webview","options","enableScripts","localResourceRoots","Uri","joinPath","extensionUri","html","getHTMLForWebview","extensionPath","onDidReceiveMessage","command","rest","_executeCommand","args","_queryDatabase","_queryTable","tables","postMessage","data","columnInfoQuery","selectQuery","columnInfoResult","rows","row","values","reduce","obj","col","index","showErrorMessage","scriptFile","stylesFile","styleResetUri","asWebviewUri","file","join","styleVSCodeUri","scriptUri","stylesUri","nonce","text","possible","i","charAt","Math","floor","random","getNonce","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","subscriptions","push"],"sourceRoot":""}