{"version":3,"file":"extension.js","mappings":"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","sources":["webpack://db-viewer-vscode-file/./src/clients/SQLiteClient.ts","webpack://db-viewer-vscode-file/./src/clients/index.ts","webpack://db-viewer-vscode-file/./src/editors/SQLiteCustomEditor.ts","webpack://db-viewer-vscode-file/./src/editors/index.ts","webpack://db-viewer-vscode-file/./src/html.ts","webpack://db-viewer-vscode-file/external commonjs \"vscode\"","webpack://db-viewer-vscode-file/external node-commonjs \"child_process\"","webpack://db-viewer-vscode-file/external node-commonjs \"fs\"","webpack://db-viewer-vscode-file/external node-commonjs \"path\"","webpack://db-viewer-vscode-file/webpack/bootstrap","webpack://db-viewer-vscode-file/./src/extension.ts"],"sourcesContent":["import { exec } from 'child_process';\nimport * as fs from 'fs';\n\nexport interface TableInfo {\n  name: string;\n  columns: { name: string; type: string; isPrimaryKey: boolean; isForeignKey: boolean }[];\n}\n\nexport class SQLiteClient {\n  private _dbFilePath?: string;\n\n  constructor(filePath: string) {\n    if (!fs.existsSync(filePath)) {\n      throw new Error('Database file not found.');\n    }\n    this._dbFilePath = filePath;\n  }\n\n  async getTablesAndColumns(): Promise<TableInfo[]> {\n    if (!this._dbFilePath) {\n      throw new Error('No database loaded.');\n    }\n\n    const tables = await this.executeCommand(\n      `SELECT name FROM sqlite_master WHERE type='table' AND name NOT LIKE 'sqlite_%';`\n    );\n\n    const tableInfoPromises = tables\n      .split('\\n')\n      .filter(Boolean)\n      .map(async tableName => {\n        return await this.getTableMetadata(tableName);\n      });\n\n    return Promise.all(tableInfoPromises);\n  }\n\n  async getTableMetadata(tableName: string) {\n    const columns = await this.executeCommand(`PRAGMA table_info(${tableName});`);\n    const columnDetails = columns\n      .split('\\n')\n      .filter(Boolean)\n      .map(line => {\n        const [cid, name, type, _notnull, _dflt_value, pk] = line.split('|');\n        return { name, type, isPrimaryKey: pk === '1', isForeignKey: false };\n      });\n\n    // Identify foreign keys\n    const foreignKeys = await this.executeCommand(`PRAGMA foreign_key_list(${tableName});`);\n\n    const foreignKeyColumns = foreignKeys\n      .split('\\n')\n      .filter(Boolean)\n      .map(line => line.split('|')[3]); // Get the `from` column name\n\n    // Update columns to mark foreign keys\n    columnDetails.forEach(column => {\n      if (foreignKeyColumns.includes(column.name)) {\n        column.isForeignKey = true;\n      }\n    });\n\n    return { name: tableName, columns: columnDetails };\n  }\n\n  executeCommand(query: string): Promise<string> {\n    if (!this._dbFilePath) {\n      return Promise.reject(new Error('No database loaded.'));\n    }\n\n    // Prepend `sqlite3` and database file path to the query\n    const cliCommand = `sqlite3 \"${this._dbFilePath}\" \"${query}\"`;\n    console.log(cliCommand);\n    return new Promise((resolve, reject) => {\n      exec(cliCommand, (error, stdout, stderr) => {\n        if (error) {\n          return reject(stderr || error.message);\n        }\n        console.log('command output', '\\n', query, '\\n', stdout.trim(), '\\n');\n        resolve(stdout.trim());\n      });\n    });\n  }\n\n  async extractSchema(): Promise<string[]> {\n    try {\n      const stdout = await this.executeCommand('.schema');\n      return stdout.split('\\n').filter(line => line.trim() !== ''); // Filter out empty lines\n    } catch (error) {\n      throw new Error(`Failed to extract schema: ${(error as { message: string }).message}`);\n    }\n  }\n}\n","export * from './DatabaseClient';\nexport * from './SQLiteClient';\n","import * as vscode from 'vscode';\nimport { SQLiteClient } from '../clients';\nimport { getHTMLForWebview } from '../html';\n\nexport class SQLiteCustomEditorProvider implements vscode.CustomReadonlyEditorProvider {\n  public static register(context: vscode.ExtensionContext): vscode.Disposable {\n    return vscode.window.registerCustomEditorProvider(\n      SQLiteCustomEditorProvider.viewType,\n      new SQLiteCustomEditorProvider(context),\n      {\n        webviewOptions: {\n          retainContextWhenHidden: true\n        }\n      }\n    );\n  }\n\n  private static readonly viewType = 'db-viewer.databaseEditor';\n  private _sqliteClient?: SQLiteClient;\n  private _panel: vscode.WebviewPanel | null = null;\n\n  constructor(private readonly context: vscode.ExtensionContext) {}\n\n  public async openCustomDocument(\n    uri: vscode.Uri,\n    openContext: vscode.CustomDocumentOpenContext,\n    token: vscode.CancellationToken\n  ): Promise<vscode.CustomDocument> {\n    // Return a readonly document (can be extended for writable).\n    return { uri, dispose: () => {} };\n  }\n\n  public async resolveCustomEditor(\n    document: vscode.CustomDocument,\n    webviewPanel: vscode.WebviewPanel,\n    token: vscode.CancellationToken\n  ): Promise<void> {\n    const dbPath = document.uri.fsPath;\n    this._sqliteClient = new SQLiteClient(dbPath);\n\n    webviewPanel.webview.options = {\n      enableScripts: true,\n      localResourceRoots: [\n        vscode.Uri.joinPath(this.context.extensionUri, 'resources'),\n        vscode.Uri.joinPath(this.context.extensionUri, 'dist')\n      ]\n    };\n\n    webviewPanel.webview.html = getHTMLForWebview(\n      webviewPanel.webview,\n      this.context.extensionPath,\n      'DBViewer',\n      'db-viewer'\n    );\n\n    webviewPanel.webview.onDidReceiveMessage(({ command, ...rest }) => {\n      this._executeCommand(command, rest);\n    });\n    this._panel = webviewPanel;\n  }\n\n  private async _executeCommand(command: string, args: any) {\n    switch (command) {\n      case 'QUERY_DATABASE': {\n        this._queryDatabase();\n        break;\n      }\n      case 'QUERY_TABLE': {\n        this._queryTable(args.tableName);\n        break;\n      }\n      case 'UPDATE_RECORD': {\n        this._updateTable(args.tableName, args.record, args.primaryKey, args.primaryKeyType);\n        break;\n      }\n      case 'EXTRACT_SCHEMA': {\n        this._parseSchemaFromSQL();\n        break;\n      }\n    }\n  }\n\n  private async _queryDatabase() {\n    const tables = await this._sqliteClient?.getTablesAndColumns();\n    this._panel?.webview.postMessage({ command: 'DISPLAY_TABLES', data: { tables } });\n  }\n\n  private async _queryTable(tableName: string) {\n    try {\n      const selectQuery = `SELECT * FROM ${tableName}`;\n      const tableMetadata = await this._sqliteClient?.getTableMetadata(tableName);\n      const columns = tableMetadata?.columns || [];\n\n      // read actual data from select query\n      const queryResult = await this._sqliteClient?.executeCommand(selectQuery);\n\n      // Parse rows into an array of objects\n      const rows = (queryResult || '')\n        .split('\\n')\n        .filter(Boolean)\n        .map(row => {\n          const values = row.split('|');\n          return columns.reduce((obj, col, index) => {\n            obj[col.name] = values[index];\n            return obj;\n          }, {} as Record<string, string>);\n        });\n      this._panel?.webview.postMessage({ command: 'DISPLAY_QUERY_RESULTS', data: { tableName, columns, rows } });\n    } catch (error) {\n      vscode.window.showErrorMessage(`Failed to query table \"${tableName}\": ${(error as { message: string }).message}`);\n    }\n  }\n\n  private async _updateTable(\n    tableName: string,\n    record: Record<string, string>,\n    primaryKey: string,\n    primaryKeyType: string\n  ) {\n    try {\n      // Extract primary key value and ensure it exists in the record\n      const primaryKeyValue = record[primaryKey];\n      if (!primaryKeyValue) {\n        throw new Error(`Primary key '${primaryKey}' is missing or undefined in the record.`);\n      }\n      // Construct the SET clause by excluding the primary key\n      const setClause = Object.entries(record)\n        .filter(([key]) => key !== primaryKey) // Exclude the primary key from the SET clause\n        .map(([key, value]) => `${key} = '${value}'`) // Format each field as key = 'value'\n        .join(', ');\n\n      const updateStatement = `UPDATE ${tableName} SET ${setClause} WHERE ${primaryKey} = ${\n        primaryKeyType === 'INTEGER' ? parseInt(primaryKeyValue, 10) : `${primaryKeyValue}`\n      }; SELECT changes();`;\n      const result = (await this._sqliteClient?.executeCommand(updateStatement)) || '';\n      const rowsAffected = parseInt(result.split('\\n').pop() || '', 10);\n      if (rowsAffected > 0) {\n        vscode.window.showInformationMessage(`${rowsAffected} row(s) updated successfully.`);\n      } else {\n        vscode.window.showWarningMessage(\n          `No rows were updated. Check the query conditions. UPDATE STMT: ${updateStatement}`\n        );\n      }\n    } catch (error) {\n      vscode.window.showErrorMessage(\n        `Failed to update table \"${tableName}\": ${(error as { message: string }).message}`\n      );\n    }\n  }\n\n  private async _parseSchemaFromSQL() {\n    const schema: Record<string, any> = {};\n    const schemaSQL = await this._sqliteClient?.extractSchema();\n    const schemaText = (schemaSQL || []).join(' ').replace(/\\s+/g, ' '); // Join and normalize whitespaces\n\n    // Regex to match CREATE TABLE statement\n    const tableRegex = /CREATE TABLE (\\w+) \\((.*?)\\);/gi;\n\n    let matchTable;\n    while ((matchTable = tableRegex.exec(schemaText)) !== null) {\n      const tableName = matchTable[1];\n      const columnsText = matchTable[2];\n\n      // Process columns\n      const columns = columnsText\n        .split(',')\n        .map(col => col.trim())\n        .filter(col => col !== '') // Remove empty columns\n        .map(col => {\n          const parts = col.split(' ');\n          const columnName = parts[0];\n          const columnType = parts[1];\n          const constraints = parts.slice(2).join(' '); // Constraints can include multiple parts\n\n          return { name: columnName, type: columnType, constraints };\n        });\n\n      schema[tableName] = { columns, foreignKeys: [] };\n    }\n\n    // Regex to match FOREIGN KEY constraints\n    const foreignKeyRegex = /FOREIGN KEY \\((.*?)\\) REFERENCES (\\w+)\\((.*?)\\)/gi;\n\n    let matchForeignKey;\n    while ((matchForeignKey = foreignKeyRegex.exec(schemaText)) !== null) {\n      const fromColumns = matchForeignKey[1].split(',').map(col => col.trim());\n      const toTable = matchForeignKey[2];\n      const toColumns = matchForeignKey[3].split(',').map(col => col.trim());\n\n      // Find the table that holds the foreign key reference\n      const fromTable = Object.keys(schema).find(table =>\n        schema[table].columns.some((col: { name: string }) => fromColumns.includes(col.name))\n      );\n\n      if (fromTable) {\n        schema[fromTable].foreignKeys.push({\n          fromColumns,\n          toTable,\n          toColumns\n        });\n      }\n    }\n\n    console.log('Parsed schema:', schema);\n\n    // Post the schema to the webview (or other UI component)\n    this._panel?.webview.postMessage({ command: 'LOAD_SCHEMA', data: { schema } });\n  }\n}\n","export * from './SQLiteCustomEditor';\n","import path from 'path';\nimport * as vscode from 'vscode';\n\nexport const getHTMLForWebview = (\n  webview: vscode.Webview,\n  extensionUri: string,\n  scriptFile: string,\n  stylesFile = ''\n) => {\n  const styleResetUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'reset.css')));\n  const styleVSCodeUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', 'vscode.css')));\n  const scriptUri = webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, `dist/webviews/${scriptFile}.js`)));\n  const stylesUri = stylesFile\n    ? webview.asWebviewUri(vscode.Uri.file(path.join(extensionUri, 'resources', `${stylesFile}.css`)))\n    : '';\n  const nonce = getNonce();\n\n  return `<!DOCTYPE html>\n            <html lang=\"en\">\n            <head>\n                <meta charset=\"UTF-8\">\n                <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n                <title>Webview with Preact</title>\n                <link href=\"${styleResetUri}\" rel=\"stylesheet\">\n\t\t\t\t        <link href=\"${styleVSCodeUri}\" rel=\"stylesheet\">\n                <link href=\"${stylesUri}\" rel=\"stylesheet\">\n                <script nonce=\"${nonce}\">\n                    const vscodeApi = acquireVsCodeApi();\n                </script>\n                <!--svg styles-->\n                <style type=\"text/css\">\n                  .st0{fill:none;stroke-width:2;stroke-linecap:round;stroke-linejoin:round;stroke-miterlimit:10;}\n                  .st1{fill:none;stroke-width:2;stroke-linejoin:round;stroke-miterlimit:10;}\n                </style>\n            </head>\n            <body>\n                <svg style=\"display: none\">\n                  <defs>\n                    <g id=\"chevron-down\">\n                      <polyline points=\"6 9 12 15 18 9\"></polyline>\n                    </g>\n                    <g id=\"chevron-right\">\n                      <polyline points=\"9 18 15 12 9 6\"></polyline>\n                    </g>\n                    <g id=\"chevron-left\">\n                      <polyline points=\"15 18 9 12 15 6\"></polyline>\n                    </g>\n                    <g id=\"chevron-up\">\n                      <polyline points=\"18 15 12 9 6 15\"></polyline>\n                    </g>\n                    <g id=\"tag\">\n                      <path d=\"M20.59 13.41l-7.17 7.17a2 2 0 0 1-2.83 0L2 12V2h10l8.59 8.59a2 2 0 0 1 0 2.82z\"></path>\n                      <line x1=\"7\" y1=\"7\" x2=\"7\" y2=\"7\"></line>\n                    </g>\n                  </defs>\n                </svg>\n                <div id=\"app\"></div>\n                <script nonce=\"${nonce}\" src=\"${scriptUri}\"></script>\n            </body>\n            </html>`;\n};\n\n// export function getWebviewContent(tablesWithColumns: { tableName: string; columns: string[] }[]) {\n//   const tableList = tablesWithColumns\n//     .map(\n//       table => `\n//       <li class=\"table-item\">\n//         <div class=\"table-name\">${table.tableName}</div>\n//         <ul class=\"columns\">\n//           ${table.columns.map(col => `<li>${col}</li>`).join('')}\n//         </ul>\n//       </li>\n//     `\n//     )\n//     .join('');\n\n//   return `\n//     <!DOCTYPE html>\n//     <html lang=\"en\">\n//     <head>\n//       <meta charset=\"UTF-8\">\n//       <style>\n//         body { display: flex; height: 100vh; margin: 0; }\n//         #left { width: 30%; border-right: 1px solid #ccc; padding: 10px; }\n//         #right { flex: 1; padding: 10px; }\n//         ul { list-style: none; padding: 0; margin: 0; }\n//         li { cursor: pointer; margin: 5px 0; }\n//         .columns { margin-left: 20px; display: none; }\n//         table { width: 100%; border-collapse: collapse; }\n//         th, td { border: 1px solid #ddd; padding: 8px; text-align: left; }\n//       </style>\n//     </head>\n//     <body>\n//       <div id=\"left\">\n//         <h3>Tables</h3>\n//         <ul>${tableList}</ul>\n//       </div>\n//       <div id=\"right\">\n//         <h3>Results</h3>\n//         <div id=\"results\"></div>\n//       </div>\n//       <script>\n//         const vscode = acquireVsCodeApi();\n\n//         document.querySelectorAll('.table-item .table-name').forEach(item => {\n//           item.addEventListener('click', () => {\n//             const tableName = item.textContent;\n//             vscode.postMessage({ command: 'queryTable', tableName });\n//           });\n//         });\n\n//         document.querySelectorAll('.table-item').forEach(item => {\n//           item.addEventListener('click', () => {\n//             const columns = item.querySelector('.columns');\n//             columns.style.display = columns.style.display === 'none' ? 'block' : 'none';\n//           });\n//         });\n\n//         window.addEventListener('message', event => {\n//           const { command, results } = event.data;\n\n//           if (command === 'displayResults') {\n//             const rows = results.split('\\\\n').map(row => row.split('|'));\n//             const table = document.createElement('table');\n//             const headerRow = rows.shift();\n\n//             if (headerRow) {\n//               const thead = document.createElement('thead');\n//               thead.innerHTML = headerRow.map(col => <th>${col}</th>).join('');\n//               table.appendChild(thead);\n//             }\n\n//             const tbody = document.createElement('tbody');\n//             tbody.innerHTML = rows.map(row => <tr>${row.map(col => `<td>${col}</td>`).join('')}</tr>).join('');\n//             table.appendChild(tbody);\n\n//             document.getElementById('results').innerHTML = '';\n//             document.getElementById('results').appendChild(table);\n//           }\n//         });\n//       </script>\n//     </body>\n//     </html>\n//   `;\n// }\n\nfunction getNonce() {\n  let text = '';\n  const possible = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789';\n  for (let i = 0; i < 32; i++) {\n    text += possible.charAt(Math.floor(Math.random() * possible.length));\n  }\n  return text;\n}\n","module.exports = require(\"vscode\");","module.exports = require(\"child_process\");","module.exports = require(\"fs\");","module.exports = require(\"path\");","// The module cache\nvar __webpack_module_cache__ = {};\n\n// The require function\nfunction __webpack_require__(moduleId) {\n\t// Check if module is in cache\n\tvar cachedModule = __webpack_module_cache__[moduleId];\n\tif (cachedModule !== undefined) {\n\t\treturn cachedModule.exports;\n\t}\n\t// Create a new module (and put it into the cache)\n\tvar module = __webpack_module_cache__[moduleId] = {\n\t\t// no module.id needed\n\t\t// no module.loaded needed\n\t\texports: {}\n\t};\n\n\t// Execute the module function\n\t__webpack_modules__[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n\t// Return the exports of the module\n\treturn module.exports;\n}\n\n","import * as vscode from 'vscode';\nimport { SQLiteCustomEditorProvider } from './editors';\n\nexport function activate(context: vscode.ExtensionContext) {\n  console.log('Congratulations, your extension \"db-viewer\" is now active!');\n  context.subscriptions.push(SQLiteCustomEditorProvider.register(context));\n}\n\nexport function deactivate() {}\n"],"names":["_dbFilePath","constructor","filePath","fs","existsSync","Error","this","getTablesAndColumns","tableInfoPromises","executeCommand","split","filter","Boolean","map","async","tableName","getTableMetadata","Promise","all","columnDetails","line","cid","name","type","_notnull","_dflt_value","pk","isPrimaryKey","isForeignKey","foreignKeyColumns","forEach","column","includes","columns","query","reject","cliCommand","console","log","resolve","exec","error","stdout","stderr","message","trim","extractSchema","SQLiteCustomEditorProvider","context","register","vscode","window","registerCustomEditorProvider","viewType","webviewOptions","retainContextWhenHidden","static","_sqliteClient","_panel","openCustomDocument","uri","openContext","token","dispose","resolveCustomEditor","document","webviewPanel","dbPath","fsPath","SQLiteClient","webview","options","enableScripts","localResourceRoots","Uri","joinPath","extensionUri","html","getHTMLForWebview","extensionPath","onDidReceiveMessage","command","rest","_executeCommand","args","_queryDatabase","_queryTable","_updateTable","record","primaryKey","primaryKeyType","_parseSchemaFromSQL","tables","postMessage","data","selectQuery","tableMetadata","rows","row","values","reduce","obj","col","index","showErrorMessage","primaryKeyValue","updateStatement","Object","entries","key","value","join","parseInt","result","rowsAffected","pop","showInformationMessage","showWarningMessage","schema","schemaText","replace","tableRegex","matchTable","parts","constraints","slice","foreignKeys","foreignKeyRegex","matchForeignKey","fromColumns","toTable","toColumns","fromTable","keys","find","table","some","push","scriptFile","stylesFile","styleResetUri","asWebviewUri","file","styleVSCodeUri","scriptUri","stylesUri","nonce","text","possible","i","charAt","Math","floor","random","getNonce","module","exports","require","__webpack_module_cache__","__webpack_require__","moduleId","cachedModule","undefined","__webpack_modules__","call","subscriptions"],"sourceRoot":""}